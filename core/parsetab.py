# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNUMrightIDrightHEXNUMALL AMPERSAND AND ANY ASCII AT BACKSLASH BYTESTRING COLON COMMA CONTAINS DIV DOTDOT ENTRYPOINT EQUALS EQUIVALENT FALSE FILESIZE FOR FORWARDSLASH FULLWORD GLOBAL GREATEREQUAL GREATERTHAN HEXNUM HYPHEN ID IMPORT IN INCLUDE INT16 INT16BE INT32 INT32BE INT8 INT8BE LBRACE LBRACK LESSEQUAL LESSTHAN LPAREN MATCHES MINUS MOD MULT NEQUALS NOCASE NOT NUM OF OR PERIOD PIPE PLUS PRIVATE RBRACE RBRACK REXSTRING RPAREN RULE SECTIONCONDITION SECTIONMETA SECTIONSTRINGS STAR STRING STRINGCOUNT STRINGNAME STRINGNAME_ARRAY THEM TRUE UINT16 UINT16BE UINT32 UINT32BE UINT8 UINT8BE WIDErules : rules rule\n                     | rulerule : imports_and_scopes RULE ID tag_section LBRACE rule_body RBRACEimports_and_scopes : imports\n                                                | includes\n                                                | scopes\n                                                | imports scopes\n                                                | includes scopes\n                                                | imports : imports import\n                         | includes\n                         | importincludes : includes include\n                            | imports\n                            | includeimport : IMPORT STRINGinclude : INCLUDE STRINGscopes : scopes scope\n                        | scopetag_section : COLON tags\n                                 | tags : tags tag\n                    | tagtag : IDscope : PRIVATE\n                     | GLOBALrule_body : sectionssections : sections section\n                        | sectionsection : meta_section\n                         | strings_section\n                         | condition_sectionmeta_section : SECTIONMETA meta_kvsstrings_section : SECTIONSTRINGS strings_kvscondition_section : SECTIONCONDITION expressionmeta_kvs : meta_kvs meta_kv\n                            | meta_kvmeta_kv : ID EQUALS STRING\n                         | ID EQUALS ID\n                         | ID EQUALS TRUE\n                         | ID EQUALS FALSE\n                         | ID EQUALS NUMstrings_kvs : strings_kvs strings_kv\n                                 | strings_kvstrings_kv : STRINGNAME EQUALS STRING\n                                | STRINGNAME EQUALS STRING string_modifiersstrings_kv : STRINGNAME EQUALS BYTESTRINGstrings_kv : STRINGNAME EQUALS REXSTRING\n                                | STRINGNAME EQUALS REXSTRING string_modifiersstring_modifiers : string_modifiers string_modifier\n                                            | string_modifierstring_modifier : NOCASE\n                                         | ASCII\n                                         | WIDE\n                                         | FULLWORDexpression : logicallogical : equality\n                                | logical AND equality\n                                | logical OR equalityequality : relational\n                                | equality EQUIVALENT relational\n                                | equality NEQUALS relationalrelational : addictive\n                                | relational GREATERTHAN addictive\n                                | relational LESSTHAN addictive\n                                | relational GREATEREQUAL addictive\n                                | relational LESSEQUAL addictiveaddictive : multiplicative\n                                | addictive PLUS multiplicative\n                                | addictive MINUS multiplicativemultiplicative : of\n                                | multiplicative MULT of\n                                | multiplicative DIV of\n                                | multiplicative MOD ofof : unary\n                                | of OF unaryunary : termterm : IDterm : STRINGNAMEterm : STRINGNAME_ARRAYterm : THEMterm : NUMterm : TRUEterm : FALSEterm : STRINGCOUNTterm : ANYterm : ALLterm : LPAREN expression RPAREN'

_lr_action_items = {'RULE': ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 40, ],
                             [-9, -9, -2, 15, -4, -5, -6, -12, -15, -19, -25, -26, -1, -7, -10, -8, -13, -18, -16, -17,
                              -3, ]), 'IMPORT': (
    [0, 1, 2, 4, 5, 7, 8, 14, 17, 19, 21, 22, 40, ], [10, 10, -2, 10, -11, -12, -15, -1, -10, -13, -16, -17, -3, ]),
                    'INCLUDE': ([0, 1, 2, 4, 5, 7, 8, 14, 17, 19, 21, 22, 40, ],
                                [11, 11, -2, -14, 11, -12, -15, -1, -10, -13, -16, -17, -3, ]), 'PRIVATE': (
        [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 40, ],
        [12, 12, -2, 12, 12, 12, -12, -15, -19, -25, -26, -1, 12, -10, 12, -13, -18, -16, -17, -3, ]), 'GLOBAL': (
        [0, 1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 40, ],
        [13, 13, -2, 13, 13, 13, -12, -15, -19, -25, -26, -1, 13, -10, 13, -13, -18, -16, -17, -3, ]),
                    '$end': ([1, 2, 14, 40, ], [0, -2, -1, -3, ]), 'STRING': ([10, 11, 69, 71, ], [21, 22, 88, 92, ]),
                    'ID': (
                        [15, 25, 27, 28, 29, 36, 38, 39, 42, 43, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
                         83,
                         84, 85, 87, 88, 89, 90, 91, ],
                        [23, 29, 29, -23, -24, 44, 57, -22, 44, -37, 57, -36, 87, 57, 57, 57, 57, 57, 57, 57, 57, 57,
                         57,
                         57, 57, 57, 57, -39, -38, -40, -41, -42, ]), 'COLON': ([23, ], [25, ]),
                    'LBRACE': ([23, 24, 27, 28, 29, 39, ], [-21, 26, -20, -23, -24, -22, ]), 'SECTIONMETA': (
        [26, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65,
         66, 68, 70, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109,
         110, 111, 112, 113, 114, 115, 116, 117, ],
        [36, 36, -29, -30, -31, -32, -28, -33, -37, -34, -44, -35, -56, -57, -60, -63, -68, -71, -75, -77, -78, -79,
         -80,
         -81, -82, -83, -84, -85, -86, -87, -36, -43, -39, -38, -40, -41, -42, -45, -47, -48, -58, -59, -61, -62, -64,
         -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, -46, -51, -52, -53, -54, -55, -49, -50, ]), 'SECTIONSTRINGS': (
        [26, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65,
         66, 68, 70, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109,
         110, 111, 112, 113, 114, 115, 116, 117, ],
        [37, 37, -29, -30, -31, -32, -28, -33, -37, -34, -44, -35, -56, -57, -60, -63, -68, -71, -75, -77, -78, -79,
         -80,
         -81, -82, -83, -84, -85, -86, -87, -36, -43, -39, -38, -40, -41, -42, -45, -47, -48, -58, -59, -61, -62, -64,
         -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, -46, -51, -52, -53, -54, -55, -49, -50, ]), 'SECTIONCONDITION': (
        [26, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65,
         66, 68, 70, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109,
         110, 111, 112, 113, 114, 115, 116, 117, ],
        [38, 38, -29, -30, -31, -32, -28, -33, -37, -34, -44, -35, -56, -57, -60, -63, -68, -71, -75, -77, -78, -79,
         -80,
         -81, -82, -83, -84, -85, -86, -87, -36, -43, -39, -38, -40, -41, -42, -45, -47, -48, -58, -59, -61, -62, -64,
         -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, -46, -51, -52, -53, -54, -55, -49, -50, ]), 'RBRACE': (
        [30, 31, 32, 33, 34, 35, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65,
         66, 68, 70, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109,
         110, 111, 112, 113, 114, 115, 116, 117, ],
        [40, -27, -29, -30, -31, -32, -28, -33, -37, -34, -44, -35, -56, -57, -60, -63, -68, -71, -75, -77, -78, -79,
         -80,
         -81, -82, -83, -84, -85, -86, -87, -36, -43, -39, -38, -40, -41, -42, -45, -47, -48, -58, -59, -61, -62, -64,
         -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, -46, -51, -52, -53, -54, -55, -49, -50, ]), 'STRINGNAME': (
        [37, 38, 45, 46, 67, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 92, 93, 94, 110, 111, 112, 113,
         114, 115, 116, 117, ],
        [47, 58, 47, -44, 58, -43, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, -45, -47, -48, -46, -51, -52,
         -53, -54, -55, -49, -50, ]), 'STRINGNAME_ARRAY': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, ]), 'THEM': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, ]), 'NUM': (
        [38, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [61, 61, 91, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, ]), 'TRUE': (
        [38, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [62, 62, 89, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, ]), 'FALSE': (
        [38, 67, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [63, 63, 90, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, ]), 'STRINGCOUNT': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, ]), 'ANY': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, ]), 'ALL': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, ]), 'LPAREN': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, ]), 'EQUALS': ([44, 47, ], [69, 71, ]),
                    'RPAREN': (
                        [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 86, 95, 96, 97, 98, 99,
                         100, 101, 102, 103,
                         104, 105, 106, 107, 108, 109, ],
                        [-56, -57, -60, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 109,
                         -58, -59, -61, -62,
                         -64, -65, -66, -67, -69, -70, -72, -73, -74, -76, -88, ]), 'AND': (
        [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 95, 96, 97, 98, 99, 100, 101, 102, 103,
         104, 105, 106, 107, 108, 109, ],
        [72, -57, -60, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -58, -59, -61, -62,
         -64,
         -65, -66, -67, -69, -70, -72, -73, -74, -76, -88, ]), 'OR': (
        [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 95, 96, 97, 98, 99, 100, 101, 102, 103,
         104, 105, 106, 107, 108, 109, ],
        [73, -57, -60, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -58, -59, -61, -62,
         -64,
         -65, -66, -67, -69, -70, -72, -73, -74, -76, -88, ]), 'EQUIVALENT': (
        [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 95, 96, 97, 98, 99, 100, 101, 102, 103,
         104,
         105, 106, 107, 108, 109, ],
        [74, -60, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 74, 74, -61, -62, -64, -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, ]), 'NEQUALS': (
        [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 95, 96, 97, 98, 99, 100, 101, 102, 103,
         104,
         105, 106, 107, 108, 109, ],
        [75, -60, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 75, 75, -61, -62, -64, -65,
         -66, -67, -69, -70, -72, -73, -74, -76, -88, ]), 'GREATERTHAN': (
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
         107,
         108, 109, ],
        [76, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 76, 76, -64, -65, -66, -67, -69,
         -70, -72, -73, -74, -76, -88, ]), 'LESSTHAN': (
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
         107,
         108, 109, ],
        [77, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 77, 77, -64, -65, -66, -67, -69,
         -70, -72, -73, -74, -76, -88, ]), 'GREATEREQUAL': (
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
         107,
         108, 109, ],
        [78, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 78, 78, -64, -65, -66, -67, -69,
         -70, -72, -73, -74, -76, -88, ]), 'LESSEQUAL': (
        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
         107,
         108, 109, ],
        [79, -63, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 79, 79, -64, -65, -66, -67, -69,
         -70, -72, -73, -74, -76, -88, ]), 'PLUS': (
        [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109, ],
        [80, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 80, 80, 80, 80, -69, -70, -72, -73,
         -74,
         -76, -88, ]), 'MINUS': (
        [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
         109, ],
        [81, -68, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 81, 81, 81, 81, -69, -70, -72, -73,
         -74,
         -76, -88, ]), 'MULT': (
        [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 103, 104, 105, 106, 107, 108, 109, ],
        [82, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 82, 82, -72, -73, -74, -76, -88, ]),
                    'DIV': (
                        [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 103, 104, 105, 106, 107, 108, 109, ],
                        [83, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 83, 83, -72, -73, -74,
                         -76, -88, ]), 'MOD': (
        [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 103, 104, 105, 106, 107, 108, 109, ],
        [84, -71, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 84, 84, -72, -73, -74, -76, -88, ]),
                    'OF': (
                        [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 105, 106, 107, 108, 109, ],
                        [85, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, 85, 85, 85, -76, -88, ]),
                    'BYTESTRING': ([71, ], [93, ]), 'REXSTRING': ([71, ], [94, ]), 'NOCASE': (
        [92, 94, 110, 111, 112, 113, 114, 115, 116, 117, ], [112, 112, 112, -51, -52, -53, -54, -55, 112, -50, ]),
                    'ASCII': ([92, 94, 110, 111, 112, 113, 114, 115, 116, 117, ],
                              [113, 113, 113, -51, -52, -53, -54, -55, 113, -50, ]), 'WIDE': (
        [92, 94, 110, 111, 112, 113, 114, 115, 116, 117, ], [114, 114, 114, -51, -52, -53, -54, -55, 114, -50, ]),
                    'FULLWORD': ([92, 94, 110, 111, 112, 113, 114, 115, 116, 117, ],
                                 [115, 115, 115, -51, -52, -53, -54, -55, 115, -50, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rules': ([0, ], [1, ]), 'rule': ([0, 1, ], [2, 14, ]), 'imports_and_scopes': ([0, 1, ], [3, 3, ]),
                  'imports': ([0, 1, ], [4, 4, ]), 'includes': ([0, 1, ], [5, 5, ]),
                  'scopes': ([0, 1, 4, 5, ], [6, 6, 16, 18, ]), 'import': ([0, 1, 4, ], [7, 7, 17, ]),
                  'include': ([0, 1, 5, ], [8, 8, 19, ]),
                  'scope': ([0, 1, 4, 5, 6, 16, 18, ], [9, 9, 9, 9, 20, 20, 20, ]), 'tag_section': ([23, ], [24, ]),
                  'tags': ([25, ], [27, ]), 'tag': ([25, 27, ], [28, 39, ]), 'rule_body': ([26, ], [30, ]),
                  'sections': ([26, ], [31, ]), 'section': ([26, 31, ], [32, 41, ]),
                  'meta_section': ([26, 31, ], [33, 33, ]), 'strings_section': ([26, 31, ], [34, 34, ]),
                  'condition_section': ([26, 31, ], [35, 35, ]), 'meta_kvs': ([36, ], [42, ]),
                  'meta_kv': ([36, 42, ], [43, 68, ]), 'strings_kvs': ([37, ], [45, ]),
                  'strings_kv': ([37, 45, ], [46, 70, ]), 'expression': ([38, 67, ], [48, 86, ]),
                  'logical': ([38, 67, ], [49, 49, ]), 'equality': ([38, 67, 72, 73, ], [50, 50, 95, 96, ]),
                  'relational': ([38, 67, 72, 73, 74, 75, ], [51, 51, 51, 51, 97, 98, ]), 'addictive': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, ], [52, 52, 52, 52, 52, 52, 99, 100, 101, 102, ]), 'multiplicative': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, ], [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 103, 104, ]),
                  'of': (
                      [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, ],
                      [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 105, 106, 107, ]), 'unary': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 108, ]), 'term': (
        [38, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, ],
        [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, ]),
                  'string_modifiers': ([92, 94, ], [110, 116, ]),
                  'string_modifier': ([92, 94, 110, 116, ], [111, 111, 117, 117, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> rules", "S'", 1, None, None, None),
    ('rules -> rules rule', 'rules', 2, 'p_rules', 'parse.py', 359),
    ('rules -> rule', 'rules', 1, 'p_rules', 'parse.py', 360),
    ('rule -> imports_and_scopes RULE ID tag_section LBRACE rule_body RBRACE', 'rule', 7, 'p_rule', 'parse.py', 364),
    ('imports_and_scopes -> imports', 'imports_and_scopes', 1, 'p_imports_and_scopes', 'parse.py', 371),
    ('imports_and_scopes -> includes', 'imports_and_scopes', 1, 'p_imports_and_scopes', 'parse.py', 372),
    ('imports_and_scopes -> scopes', 'imports_and_scopes', 1, 'p_imports_and_scopes', 'parse.py', 373),
    ('imports_and_scopes -> imports scopes', 'imports_and_scopes', 2, 'p_imports_and_scopes', 'parse.py', 374),
    ('imports_and_scopes -> includes scopes', 'imports_and_scopes', 2, 'p_imports_and_scopes', 'parse.py', 375),
    ('imports_and_scopes -> <empty>', 'imports_and_scopes', 0, 'p_imports_and_scopes', 'parse.py', 376),
    ('imports -> imports import', 'imports', 2, 'p_imports', 'parse.py', 380),
    ('imports -> includes', 'imports', 1, 'p_imports', 'parse.py', 381),
    ('imports -> import', 'imports', 1, 'p_imports', 'parse.py', 382),
    ('includes -> includes include', 'includes', 2, 'p_includes', 'parse.py', 387),
    ('includes -> imports', 'includes', 1, 'p_includes', 'parse.py', 388),
    ('includes -> include', 'includes', 1, 'p_includes', 'parse.py', 389),
    ('import -> IMPORT STRING', 'import', 2, 'p_import', 'parse.py', 394),
    ('include -> INCLUDE STRING', 'include', 2, 'p_include', 'parse.py', 402),
    ('scopes -> scopes scope', 'scopes', 2, 'p_scopes', 'parse.py', 410),
    ('scopes -> scope', 'scopes', 1, 'p_scopes', 'parse.py', 411),
    ('tag_section -> COLON tags', 'tag_section', 2, 'p_tag_section', 'parse.py', 415),
    ('tag_section -> <empty>', 'tag_section', 0, 'p_tag_section', 'parse.py', 416),
    ('tags -> tags tag', 'tags', 2, 'p_tags', 'parse.py', 420),
    ('tags -> tag', 'tags', 1, 'p_tags', 'parse.py', 421),
    ('tag -> ID', 'tag', 1, 'p_tag', 'parse.py', 425),
    ('scope -> PRIVATE', 'scope', 1, 'p_scope', 'parse.py', 432),
    ('scope -> GLOBAL', 'scope', 1, 'p_scope', 'parse.py', 433),
    ('rule_body -> sections', 'rule_body', 1, 'p_rule_body', 'parse.py', 441),
    ('sections -> sections section', 'sections', 2, 'p_rule_sections', 'parse.py', 446),
    ('sections -> section', 'sections', 1, 'p_rule_sections', 'parse.py', 447),
    ('section -> meta_section', 'section', 1, 'p_rule_section', 'parse.py', 451),
    ('section -> strings_section', 'section', 1, 'p_rule_section', 'parse.py', 452),
    ('section -> condition_section', 'section', 1, 'p_rule_section', 'parse.py', 453),
    ('meta_section -> SECTIONMETA meta_kvs', 'meta_section', 2, 'p_meta_section', 'parse.py', 457),
    ('strings_section -> SECTIONSTRINGS strings_kvs', 'strings_section', 2, 'p_strings_section', 'parse.py', 462),
    (
        'condition_section -> SECTIONCONDITION expression', 'condition_section', 2, 'p_condition_section', 'parse.py',
        466),
    ('meta_kvs -> meta_kvs meta_kv', 'meta_kvs', 2, 'p_meta_kvs', 'parse.py', 473),
    ('meta_kvs -> meta_kv', 'meta_kvs', 1, 'p_meta_kvs', 'parse.py', 474),
    ('meta_kv -> ID EQUALS STRING', 'meta_kv', 3, 'p_meta_kv', 'parse.py', 479),
    ('meta_kv -> ID EQUALS ID', 'meta_kv', 3, 'p_meta_kv', 'parse.py', 480),
    ('meta_kv -> ID EQUALS TRUE', 'meta_kv', 3, 'p_meta_kv', 'parse.py', 481),
    ('meta_kv -> ID EQUALS FALSE', 'meta_kv', 3, 'p_meta_kv', 'parse.py', 482),
    ('meta_kv -> ID EQUALS NUM', 'meta_kv', 3, 'p_meta_kv', 'parse.py', 483),
    ('strings_kvs -> strings_kvs strings_kv', 'strings_kvs', 2, 'p_strings_kvs', 'parse.py', 493),
    ('strings_kvs -> strings_kv', 'strings_kvs', 1, 'p_strings_kvs', 'parse.py', 494),
    ('strings_kv -> STRINGNAME EQUALS STRING', 'strings_kv', 3, 'p_strings_kv_str', 'parse.py', 499),
    ('strings_kv -> STRINGNAME EQUALS STRING string_modifiers', 'strings_kv', 4, 'p_strings_kv_str', 'parse.py', 500),
    ('strings_kv -> STRINGNAME EQUALS BYTESTRING', 'strings_kv', 3, 'p_strings_kv_bytestr', 'parse.py', 510),
    ('strings_kv -> STRINGNAME EQUALS REXSTRING', 'strings_kv', 3, 'p_strings_kv_rexstr', 'parse.py', 518),
    ('strings_kv -> STRINGNAME EQUALS REXSTRING string_modifiers', 'strings_kv', 4, 'p_strings_kv_rexstr', 'parse.py',
     519),
    ('string_modifiers -> string_modifiers string_modifier', 'string_modifiers', 2, 'p_string_modifers', 'parse.py',
     528),
    ('string_modifiers -> string_modifier', 'string_modifiers', 1, 'p_string_modifers', 'parse.py', 529),
    ('string_modifier -> NOCASE', 'string_modifier', 1, 'p_string_modifier', 'parse.py', 533),
    ('string_modifier -> ASCII', 'string_modifier', 1, 'p_string_modifier', 'parse.py', 534),
    ('string_modifier -> WIDE', 'string_modifier', 1, 'p_string_modifier', 'parse.py', 535),
    ('string_modifier -> FULLWORD', 'string_modifier', 1, 'p_string_modifier', 'parse.py', 536),
    ('expression -> logical', 'expression', 1, 'p_expression', 'parse.py', 544),
    ('logical -> equality', 'logical', 1, 'p_logical', 'parse.py', 549),
    ('logical -> logical AND equality', 'logical', 3, 'p_logical', 'parse.py', 550),
    ('logical -> logical OR equality', 'logical', 3, 'p_logical', 'parse.py', 551),
    ('equality -> relational', 'equality', 1, 'p_equality', 'parse.py', 559),
    ('equality -> equality EQUIVALENT relational', 'equality', 3, 'p_equality', 'parse.py', 560),
    ('equality -> equality NEQUALS relational', 'equality', 3, 'p_equality', 'parse.py', 561),
    ('relational -> addictive', 'relational', 1, 'p_relational', 'parse.py', 569),
    ('relational -> relational GREATERTHAN addictive', 'relational', 3, 'p_relational', 'parse.py', 570),
    ('relational -> relational LESSTHAN addictive', 'relational', 3, 'p_relational', 'parse.py', 571),
    ('relational -> relational GREATEREQUAL addictive', 'relational', 3, 'p_relational', 'parse.py', 572),
    ('relational -> relational LESSEQUAL addictive', 'relational', 3, 'p_relational', 'parse.py', 573),
    ('addictive -> multiplicative', 'addictive', 1, 'p_addictive', 'parse.py', 581),
    ('addictive -> addictive PLUS multiplicative', 'addictive', 3, 'p_addictive', 'parse.py', 582),
    ('addictive -> addictive MINUS multiplicative', 'addictive', 3, 'p_addictive', 'parse.py', 583),
    ('multiplicative -> of', 'multiplicative', 1, 'p_multiplicative', 'parse.py', 591),
    ('multiplicative -> multiplicative MULT of', 'multiplicative', 3, 'p_multiplicative', 'parse.py', 592),
    ('multiplicative -> multiplicative DIV of', 'multiplicative', 3, 'p_multiplicative', 'parse.py', 593),
    ('multiplicative -> multiplicative MOD of', 'multiplicative', 3, 'p_multiplicative', 'parse.py', 594),
    ('of -> unary', 'of', 1, 'p_of', 'parse.py', 602),
    ('of -> of OF unary', 'of', 3, 'p_of', 'parse.py', 603),
    ('unary -> term', 'unary', 1, 'p_unary', 'parse.py', 611),
    ('term -> ID', 'term', 1, 'p_termID', 'parse.py', 619),
    ('term -> STRINGNAME', 'term', 1, 'p_termSTRNAME', 'parse.py', 625),
    ('term -> STRINGNAME_ARRAY', 'term', 1, 'p_termSTRARR', 'parse.py', 631),
    ('term -> THEM', 'term', 1, 'p_termTHEM', 'parse.py', 637),
    ('term -> NUM', 'term', 1, 'p_termNUM', 'parse.py', 643),
    ('term -> TRUE', 'term', 1, 'p_termTRUE', 'parse.py', 649),
    ('term -> FALSE', 'term', 1, 'p_termFALSE', 'parse.py', 655),
    ('term -> STRINGCOUNT', 'term', 1, 'p_termSTRCNT', 'parse.py', 661),
    ('term -> ANY', 'term', 1, 'p_termANY', 'parse.py', 667),
    ('term -> ALL', 'term', 1, 'p_termALL', 'parse.py', 673),
    ('term -> LPAREN expression RPAREN', 'term', 3, 'p_termGROUP', 'parse.py', 679),
]
